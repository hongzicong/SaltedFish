package com.ping.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import hongzicong.saltedfish.model.OneDayTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ONE_DAY_TASK".
*/
public class OneDayTaskDao extends AbstractDao<OneDayTask, Long> {

    public static final String TABLENAME = "ONE_DAY_TASK";

    /**
     * Properties of entity OneDayTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Detail = new Property(1, String.class, "detail", false, "DETAIL");
        public final static Property MBeginTime = new Property(2, long.class, "mBeginTime", false, "M_BEGIN_TIME");
        public final static Property MEndTime = new Property(3, long.class, "mEndTime", false, "M_END_TIME");
        public final static Property IsComplete = new Property(4, boolean.class, "isComplete", false, "IS_COMPLETE");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property IsDetailTime = new Property(6, boolean.class, "isDetailTime", false, "IS_DETAIL_TIME");
    }


    public OneDayTaskDao(DaoConfig config) {
        super(config);
    }
    
    public OneDayTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ONE_DAY_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DETAIL\" TEXT," + // 1: detail
                "\"M_BEGIN_TIME\" INTEGER NOT NULL ," + // 2: mBeginTime
                "\"M_END_TIME\" INTEGER NOT NULL ," + // 3: mEndTime
                "\"IS_COMPLETE\" INTEGER NOT NULL ," + // 4: isComplete
                "\"NAME\" TEXT NOT NULL ," + // 5: name
                "\"IS_DETAIL_TIME\" INTEGER NOT NULL );"); // 6: isDetailTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ONE_DAY_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OneDayTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(2, detail);
        }
        stmt.bindLong(3, entity.getMBeginTime());
        stmt.bindLong(4, entity.getMEndTime());
        stmt.bindLong(5, entity.getIsComplete() ? 1L: 0L);
        stmt.bindString(6, entity.getName());
        stmt.bindLong(7, entity.getIsDetailTime() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OneDayTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(2, detail);
        }
        stmt.bindLong(3, entity.getMBeginTime());
        stmt.bindLong(4, entity.getMEndTime());
        stmt.bindLong(5, entity.getIsComplete() ? 1L: 0L);
        stmt.bindString(6, entity.getName());
        stmt.bindLong(7, entity.getIsDetailTime() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OneDayTask readEntity(Cursor cursor, int offset) {
        OneDayTask entity = new OneDayTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // detail
            cursor.getLong(offset + 2), // mBeginTime
            cursor.getLong(offset + 3), // mEndTime
            cursor.getShort(offset + 4) != 0, // isComplete
            cursor.getString(offset + 5), // name
            cursor.getShort(offset + 6) != 0 // isDetailTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OneDayTask entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDetail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMBeginTime(cursor.getLong(offset + 2));
        entity.setMEndTime(cursor.getLong(offset + 3));
        entity.setIsComplete(cursor.getShort(offset + 4) != 0);
        entity.setName(cursor.getString(offset + 5));
        entity.setIsDetailTime(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OneDayTask entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OneDayTask entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OneDayTask entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
